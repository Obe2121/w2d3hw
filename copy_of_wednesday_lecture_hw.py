# -*- coding: utf-8 -*-
"""Copy of Wednesday_Lecture- HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16_x2ognaNkRLI7DUeNN_aGG_Y3ymG8B8

# Data Collections 2 (Dictionaries, Sets) and Importing Modules

## Tasks Today:

1) Dictionary <br>
 &nbsp;&nbsp;&nbsp;&nbsp; a) Declaring (key, value) <br>
 &nbsp;&nbsp;&nbsp;&nbsp; b) Accessing Values <br>
 &nbsp;&nbsp;&nbsp;&nbsp; ------ Exercise #1 - Print the eye color of each person in a double nested dict <br>
 &nbsp;&nbsp;&nbsp;&nbsp; c) Adding New Pairs <br>
 &nbsp;&nbsp;&nbsp;&nbsp; d) Modifying Values <br>
 &nbsp;&nbsp;&nbsp;&nbsp; e) Removing Key, Value Pairs <br>
 &nbsp;&nbsp;&nbsp;&nbsp; f) Looping a Dictionary <br>
 &nbsp;&nbsp;&nbsp;&nbsp; g) Looping Only Keys <br>
 &nbsp;&nbsp;&nbsp;&nbsp; h) Looping Only Values <br>
 &nbsp;&nbsp;&nbsp;&nbsp; ------ Exercise #2 - Create a Function that Prints All Key Value Pairs within a print .format()  <br>
 &nbsp;&nbsp;&nbsp;&nbsp; i) sorted() <br>
 &nbsp;&nbsp;&nbsp;&nbsp; j) Lists with Dictionaries <br>
 &nbsp;&nbsp;&nbsp;&nbsp; k) Dictionaries with Lists <br>
 &nbsp;&nbsp;&nbsp;&nbsp; l) Dictionaries with Dictionaries <br>
 &nbsp;&nbsp;&nbsp;&nbsp; ------ Exercise #3 - Write a Function that asks someone's name and address, and then stores that into a dictionary, which prints all names and addresses after they're done putting information in...  <br>
2) Set <br>
 &nbsp;&nbsp;&nbsp;&nbsp; a) Declaring <br>
 &nbsp;&nbsp;&nbsp;&nbsp; b) .add() <br>
 &nbsp;&nbsp;&nbsp;&nbsp; c) .remove() <br>
 &nbsp;&nbsp;&nbsp;&nbsp; d) .union() <br>
 &nbsp;&nbsp;&nbsp;&nbsp; e) .intersection() <br>
 &nbsp;&nbsp;&nbsp;&nbsp; f) .difference() <br>
 &nbsp;&nbsp;&nbsp;&nbsp; g) Frozen Set <br>
3) Modules <br>
 &nbsp;&nbsp;&nbsp;&nbsp; a) Importing Entire Modules <br>
 &nbsp;&nbsp;&nbsp;&nbsp; b) Importing Methods Only <br>
 &nbsp;&nbsp;&nbsp;&nbsp; c) Using the 'as' Keyword <br>
 &nbsp;&nbsp;&nbsp;&nbsp; d) Creating a Module <br>
4) Exercises <br>
 &nbsp;&nbsp;&nbsp;&nbsp; a) Build a Shopping Cart <br>
 &nbsp;&nbsp;&nbsp;&nbsp; b) Create Your Own Module <br>

## Dictionary <br>
<p>A collection of data with 'key:value' pairs. Dictionaries are ordered as of Python 3.6</p>

##### Declaring (key, value)
"""

# key : value pairs
# keys should be unique
# keys can use numbers or string

d = {} #Empty dictionary
print(type(d))
d = dict() #slower by alot

d1 = {
    "Key":"Value",
    "name":"Steve",
    0:"integer"
}
print(d1)
d = dict(key="Value",name="Steve")
print(d)

"""##### Accessing Values"""

d1 = {
    "Key":"Value",
    "name":"Steve",
    "age":55,
    0:"integer"
}
# dictionary[key]
print(type(d1))
print(type(d1["name"]))
print(type(d1[0]))
print(type(d1["age"]))

"""## In-Class Exercise #1 - Print a formatted statement from the dictionary below <br>
<p>The output should be '2018 Chevrolet Silverado'</p>

() #para
[] #brackets
{} #braces
% # sometimes I call it grapes
! # sometimes i'll refer to it as a Bang
#! #shebang
# number sign, pound sign, or hash
| Pipe
"""

# use the dict below
#Output: I have a 2018 Chevrolet Silverado
truck = {
    'year': 2018,
    'make': 'Chevrolet',
    'model': 'Silverado'
}

print(f"I have a {truck['year']} {truck['make']} {truck['model']}")

"""##### .get()"""

# is slower than the bracket method... but it has a huge advantage

truck = {
    'year': 2018,
    'make': 'Chevrolet',
    'model': 'Silverado'
}

print(truck['year']) # faster
print(truck.get('year'))

# truck['color']
print(truck.get('color'))
print(truck.get('color','red'))

truck

"""##### Adding New Pairs"""

truck = {
    'year': 2018,
    'make': 'Chevrolet',
    'model': 'Silverado'
}
#edit value
truck['year'] = 2020
truck

truck['color']="Blue"
print(truck)

truck.update({'milage':100000})
print(truck)

truck.update(wheels = 4)
print(truck)

import this

"""##### Modifying Values"""

#dict[existing key] = new value
truck = {
    'year': 2018,
    'make': 'Chevrolet',
    'model': 'Silverado'
}

truck['make']="Chevy"
print(truck)

truck.update(make="ford")
print(truck)

"""##### Removing Key, Value Pairs"""

# del dict[key]
del truck['year']
print(truck)

"""##### Looping a Dictionary"""

x, y = (1, 2)
print(x)
print(y)

# .items()
truck.items()

for key, value in truck.items():
    print("key is",key, "and the value is:",value)

"""##### Looping Only Keys"""

truck = {
    'year': 2018,
    'make': 'Chevrolet',
    'model': 'Silverado'
}
#This is the best way to loop through keys
for key in truck:
    print("the key is", key)
    print("the value is",truck[key])

truck.keys()

for key in truck.keys():
    print(key)

"""##### Looping Only Values"""

# .values()
truck.values()

for value in truck.values():
    print(value)

"""## In-Class Exercise #2 - Create a Function that Prints All Key Value Pairs within a f-string <br>
<p><b>Output should be:</b><br>
Max has blue eyes<br>
Lilly has brown eyes<br>
Barney has blue eyes<br>
etc.
</p>
"""

# use the dict below

people = {
    'Max': 'blue',
    'Lilly': 'brown',
    'Barney': 'blue',
    'Larney': 'brown',
    'Ted': 'purple'
}

# loop over dict
def eye_colors(d):
    for name, eye_color in sorted(d.items()):
        # create and print sentence "[key] has [value] eyes" for each item
        print(f"{name} has {eye_color} eyes")

eye_colors(people)

"""##### sorted()"""

# sorts variables in order
# sorted(dict.values()) or dict.keys() or dict.items()
print(
    sorted(people) #keys sorted
)

print(
    sorted(people.keys()) #keys sorted
)

print(
    sorted(people.values())
)

print(
    sorted(people.items()) #sorts by the key
)
print(people)
people = dict(sorted(people.items())) # the dictionary is now sorted!!!
print(people)

"""##### List with Dictionaries"""

names = ['dave', 'randy','greg', {'random_guy': 'robert', 'another_guy': 'travis'}, "steve" ]
print(names[3])
print(type(names[3]))
print(names[3]["random_guy"])

names = ['dave', 'randy','greg', {'random_guy': 'robert', 'another_guy': 'travis'}, "steve" ]
inner_dict = names[3]
print(inner_dict)
inner_dict["random_guy"]

all_items=[
    {"name":"Item A", "price":2.99},
    {"name":"Item B", "price":12.99},
    {"name":"Item C", "price":22.99}
]

for item in all_items:
    print(item['name'], item['price'])

"""##### Dictionaries with Lists"""

# be careful when using numbers as keys in dictionaries, don't confuse them with indexes
d5 = {
    "students":["Mark", "Natasha", "Toan"],
    "age":[22,55,6]
}

print(d5["students"][1])

d5["age"][0]

"""##### Dictionaries with Dictionaries"""

# to get values, must traverse through keys
d6 = {
    "random":1234,
    "ice_cream":{
        "choc":2.99,
        "van":3.99,
        "oreo":{'large':6.99, 'small':[2.99,4.99]}
    }
}
print(d6["ice_cream"]["choc"])
print(d6["ice_cream"]["oreo"]['large'])
print(d6["ice_cream"]["oreo"]['small'][1])

"""## Using Python's Hashing Function"""

# hash(var)
help(hash)

a = "Bo"
b = "Bob"
c = "Bo"
d = "Bob"

print(hash(a))
print(hash(b))
print(hash(c))
print(hash(d))

d7={"Bob":123,"nate":987}

if "Bob" in d7:
    print("yes")
else:
    print("no")

my_items=[]
while True:
    response = input("What do you want to do add or remove or quit? ")
    if response == 'quit':
        break
    elif response == 'add':
        item=input("What do you want to add? ").strip()
        my_items.append(item)
        
    elif response == "remove":
        item=input("What do you want to remove? ").strip()
        my_items.remove(item)
    print("your items: ",my_items)

"""## Exercise #3 - Write a Function that asks someone's name and address, and then stores that into a dictionary, and continues to do so until they choose to 'quit'. Once they quit, the program should print all names and addresses. <br>
<p>
<b>Proper steps:</b><br>
step 1: write a function that takes in information and stores it in a dictionary<br>
step 2: define an empty dictionary to work with<br>
step 3: create our loop, which asks the user for information until they quit<br>
step 4: ask for the information, and store it into variables<br>
step 5: check if the user types quit<br>
step 5a: print out all information<br>
step 5b: break out of the loop<br>
step 6: if they didn't quit, add the information to the dictionary<br>
step 7: invoke the function by calling it
</p>
"""

from IPython.display import clear_output

for i in range(4):
    clear_output()
    print(i)

from IPython.display import clear_output #This module will clear all pre-exising output form your program

def address_book_function():
    address_book={}
    while True:
        clear_output()
        name = input("What is your name? ").strip()
        if name.lower() == 'quit':
            print(address_book)
            break
        address = input("What is your address? ").strip()
        if address.lower()=='quit':
            print(address_book)
            break
        address_book[name]=address
    return address_book
    
address_book_function()

"""## Set <br>
<p>A Set is an unordered collection data type that is iterable (loop), mutable, and has no duplicate elements.<br>Major advantage is that it is highly optimized in checking if something is in the set, as opposed to checking if something is in a list.</p>

##### Declaring
"""

# set() or {}
# no order {3, 2, 1} outputs as {1, 2, 3}
my_set = set()
print(type(my_set))

# this is not a set
my_set2 = {} #nooo
print(type(my_set2))

my_set3 ={"Austin","Jesus","Mike","Mike"} # no Dups
print(my_set3)

"""##### .add()"""

# set.add()
my_set3.add("Tate")
my_set3

"""##### .remove()"""

# removes by value
# set.remove()
# nums.remove(56)

my_set3.remove("Mike")
my_set3

"""##### .union() """

# Returns a union of two sets, can also use '|' or set.union(set)
# joins all numbers, gets rid of duplicates
set1 = {1,2,3,4}
set2 = {3,4,5,6}

unioned_set=set1.union(set2)
print(unioned_set)

unioned_set=set2.union(set1)
print(unioned_set)

u_set = set2 | set1
print(u_set)

"""##### .intersection()"""

# Returns an intersection of two sets, can also use '&'
# only takes similar elements from both sets
set1 = {1,2,3,4,5,6}
set2 = {1,2,3,4}
set1.intersection(set2)

set1 & set2

"""##### .difference()"""

# Returns a set containing all the elements of invoking set that are not in the second set, can also use '-'
# only takes values from the first set that are not in the second set
# order matters

set1 = {1,2,3,4,5,6}
set2 = {1,2,3,4}

print(set2.difference(set1))
print(set1.difference(set2))

"""##### .clear()"""

# Empties the whole set
# set.clear()
set1.clear()
print(set1)

my_set3 ={"Austin","Jesus","Mike","Mike"} 

"Austin" in my_set3
# FAST ^^^

# BELOW IS SLOW

my_list =["Austin","Jesus","Mike","Mike"]
"Austin" in my_list

# in background 
for name in my_list:
    if name == "Austin":
        return True

set([1,1,1,1,2,2,3,4,5])

"""##### Frozenset <br>
<p>Frozen sets are immutable objects that only support methods and operators that produce a result without affecting the frozen set or sets to which they are applied.</p><br><b>Unique & Immutable</b>
"""

# frozenset([])
s3 = {1,2,3,4,5,6}
s3 = frozenset(s3)
print(s3)

s3.add("7") # can't add or remove from a frozen set

for number in s3:
    print(number)
    if number == 1:
        print("WE found one")

"""## Modules

##### Importing Entire Modules
"""

from math import * # Gotten everything.. probably not wise
pi

from math import pi, floor, ceil as c
pi
floor(3.4)
c(3.4)



# import or from 'xxx' import *
# import math
import math as m #not always a good idea

print(m.pi)

print(m.floor(math.pi))#rounds down
print(m.ceil(math.pi)) #rounds up

import pandas as pd
import matplotlib as plt



"""##### Importing Methods Only"""

# from 'xxx' import 'xxx'
# from math import floor

"""##### Using the 'as' Keyword"""

# from 'xxx' import 'xxx' as 'xxx' or import 'xxx' as 'xxx'
# from math import floor as f

"""##### Creating a Module"""

import my_mod
my_mod.say_hello("kevin")
my_mod.say_goodbye("kevin")

from my_mod import say_hello

say_hello("Steve")

"""# Exercises

### 1) Build a Shopping Cart <br>
<p><b>You can use either lists or dictionaries. The program should have the following capabilities:</b><br><br>
1) Takes in input <br>
2) Stores user input into a dictionary or list <br>
3) The User can add or delete items <br>
4) The User can see current shopping list <br>
5) The program Loops until user 'quits' <br>
6) Upon quiting the program, print out all items in the user's list <br>
</p>
"""



from IPython.display import clear_output #This module will clear all pre-exising output form your program
# Ask the user four bits of input: Do you want to : Show/Add/Delete or Quit?

shopping_cart={}
def shopping_cart_function():
     while True:
        clear_output()
        item = input("What would you like to do show, add, remove, or quit? ")
        if item.lower() == 'quit':
            print(shopping_cart)
            break
        if item.lower() == 'add':
          item = input("what would you like to add? ")
          amount = input("how many would you like to add? ")
        if item.lower()=='quit':
            print(shopping_cart)
            break
        if item.lower() =='remove':
          item = input('what would you like to remove? ')
          del shopping_cart[item]
          print(shopping_cart)
        if item.lower == 'show':
          print(shopping_cart)
          break
        shopping_cart[item]=amount
     return shopping_cart

shopping_cart_function()

"""### 2) Create a Module in VS Code and Import It into jupyter notebook <br>
<p><b>Module should have the following capabilities:</b><br><br>
1) Has a function to calculate the square footage of a house <br>
    <b>Reminder of Formula: Length X Width == Area<br>
        <hr>
2) Has a function to calculate the circumference of a circle <br><br>
<b>Program in Jupyter Notebook should take in user input and use imported functions to calculate a circle's circumference or a houses square footage</b>
</p>
"""

